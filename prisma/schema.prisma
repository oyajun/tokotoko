// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
  teachers Teacher[]
  tests    Test[]
}

model Student {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  pass        String
  classes     Class[]
  submittions Submittion[]
}

model Teacher {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  pass    String
  classes Class[]
}

model Test {
  id          Int          @id @default(autoincrement())
  title       String
  summary     String
  sections    Section[]
  startDate   DateTime     @default(now())
  endDate     DateTime     @default(now())
  submittions Submittion[]
  classes     Class[]
}

model Section {
  id          Int          @id @default(autoincrement())
  testId      Int
  number      Int
  summary     String
  subSections SubSection[]

  test Test @relation(fields: [testId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model SubSection {
  id        Int        @id @default(autoincrement())
  sectionId Int
  number    Int
  summary   String
  questions Question[]

  section Section @relation(fields: [sectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Question {
  id                Int      @id @default(autoincrement())
  subSectionId      Int
  number            Int
  question          String
  answer            String
  submittionAnswers Answer[]

  SubSection SubSection @relation(fields: [subSectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Submittion {
  id             Int      @id @default(autoincrement())
  testId         Int
  studentId      Int
  submittionDate DateTime @default(now())
  answers        Answer[]

  test    Test    @relation(fields: [testId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
}

model Answer {
  id           Int    @id @default(autoincrement())
  submittionId Int
  questionId   Int
  point        Int
  text         String

  submittion Submittion @relation(fields: [submittionId], references: [id])
  question   Question    @relation(fields: [questionId], references: [id])
}
